openapi: 3.0.3
info:
  title: Backend Orquestador - Botica
  description: |
    API del backend orquestador que coordina llamadas entre microservicios.
    
    ## Funcionalidades
    - Registro de compras con validación de stock y recetas
    - Consulta de compras con detalles enriquecidos
    - Validación de recetas médicas
    
    ## Autenticación
    Todos los endpoints (excepto `/echo`) requieren un token JWT en el header Authorization.
  version: 1.0.0
  contact:
    name: Equipo de Desarrollo
    email: dev@botica.com

servers:
  - url: http://localhost:8888/api/orchestrator
    description: Servidor de desarrollo
  - url: https://api.botica.com/orchestrator
    description: Servidor de producción

tags:
  - name: Health
    description: Endpoints de monitoreo
  - name: Compras
    description: Gestión de compras orquestadas
  - name: Recetas
    description: Validación de recetas médicas

paths:
  /echo:
    get:
      tags:
        - Health
      summary: Health Check
      description: Verifica que el servicio esté operativo
      operationId: healthCheck
      responses:
        '200':
          description: Servicio operativo
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: healthy
                  service:
                    type: string
                    example: orchestrator
                  message:
                    type: string
                    example: Backend orquestador operativo

  /compras:
    post:
      tags:
        - Compras
      summary: Registrar Compra
      description: |
        Registra una nueva compra validando:
        - Stock disponible de productos
        - Recetas médicas para productos que lo requieran
        - Existencia de productos
      operationId: registrarCompra
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - productos
              properties:
                productos:
                  type: array
                  description: Lista de productos a comprar
                  items:
                    type: object
                    required:
                      - producto_id
                      - cantidad
                    properties:
                      producto_id:
                        type: integer
                        description: ID del producto
                        example: 1
                      cantidad:
                        type: integer
                        description: Cantidad a comprar
                        minimum: 1
                        example: 2
                datos_adicionales:
                  type: object
                  description: Datos adicionales opcionales
                  properties:
                    metodo_pago:
                      type: string
                      example: tarjeta
            examples:
              simple:
                summary: Compra simple
                value:
                  productos:
                    - producto_id: 1
                      cantidad: 2
              multiple:
                summary: Compra múltiple con datos adicionales
                value:
                  productos:
                    - producto_id: 1
                      cantidad: 2
                    - producto_id: 5
                      cantidad: 1
                  datos_adicionales:
                    metodo_pago: tarjeta
      responses:
        '201':
          description: Compra registrada exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CompraResponse'
        '400':
          description: Error de validación
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                stockInsuficiente:
                  summary: Stock insuficiente
                  value:
                    error: "Stock insuficiente para el producto 'Paracetamol 500mg'. Disponible: 5, Solicitado: 10"
                sinReceta:
                  summary: Producto requiere receta
                  value:
                    error: "Los siguientes productos requieren receta médica validada: Amoxicilina 500mg"
                    details:
                      productos_sin_receta:
                        - Amoxicilina 500mg
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          description: Producto no encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          $ref: '#/components/responses/InternalError'

  /compras/me:
    get:
      tags:
        - Compras
      summary: Mis Compras
      description: Obtiene las compras del usuario autenticado con detalles completos de productos
      operationId: listarMisCompras
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Lista de compras del usuario
          content:
            application/json:
              schema:
                type: object
                properties:
                  compras:
                    type: array
                    items:
                      $ref: '#/components/schemas/CompraDetallada'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalError'

  /compras/all:
    get:
      tags:
        - Compras
      summary: Todas las Compras (Admin)
      description: Obtiene todas las compras con detalles. Solo accesible para administradores
      operationId: listarTodasCompras
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Lista de todas las compras
          content:
            application/json:
              schema:
                type: object
                properties:
                  compras:
                    type: array
                    items:
                      $ref: '#/components/schemas/CompraDetallada'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          description: Acceso denegado - Usuario no es administrador
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          $ref: '#/components/responses/InternalError'

  /recetas/validar/{receta_id}:
    put:
      tags:
        - Recetas
      summary: Validar y Actualizar Receta
      description: |
        Valida una receta médica y actualiza su estado. Realiza las siguientes validaciones:
        - Productos en la receta existen en el sistema
        - Médico está colegiado y tiene colegiatura válida
        - Paciente está registrado en el sistema
      operationId: validarReceta
      security:
        - bearerAuth: []
      parameters:
        - name: receta_id
          in: path
          required: true
          description: ID de la receta a validar
          schema:
            type: string
            example: "123"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - estadovalidacion
              properties:
                estadovalidacion:
                  type: string
                  description: Nuevo estado de la receta
                  enum:
                    - VALIDADA
                    - RECHAZADA
                    - PENDIENTE
                  example: VALIDADA
      responses:
        '200':
          description: Receta validada y actualizada exitosamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  mensaje:
                    type: string
                    example: Receta validada y actualizada exitosamente
                  receta:
                    type: object
                    description: Datos de la receta actualizada
                  validaciones:
                    type: object
                    properties:
                      productos_validados:
                        type: integer
                        example: 3
                      medico_valido:
                        type: boolean
                        example: true
                      paciente_valido:
                        type: boolean
                        example: true
        '400':
          description: Error de validación
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                productoNoExiste:
                  summary: Producto no existe
                  value:
                    error: "El producto con ID 999 mencionado en la receta no existe"
                medicoInvalido:
                  summary: Médico sin colegiatura válida
                  value:
                    error: "El médico Dr. Juan Pérez no tiene colegiatura válida"
                pacienteNoRegistrado:
                  summary: Paciente no registrado
                  value:
                    error: "El paciente con DNI 12345678 no está registrado"
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          description: Receta no encontrada
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          $ref: '#/components/responses/InternalError'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: Token JWT obtenido del microservicio de autenticación

  schemas:
    CompraResponse:
      type: object
      properties:
        id:
          type: integer
          example: 123
        fecha_compra:
          type: string
          format: date
          example: "2025-10-04"
        usuario_id:
          type: integer
          example: 456
        productos:
          type: array
          items:
            type: object
            properties:
              producto_id:
                type: integer
              cantidad:
                type: integer
        productos_detalle:
          type: array
          items:
            $ref: '#/components/schemas/ProductoDetalle'

    CompraDetallada:
      type: object
      properties:
        id:
          type: integer
          example: 123
        fecha_compra:
          type: string
          format: date
          example: "2025-10-04"
        usuario_id:
          type: integer
          example: 456
        productos_detalle:
          type: array
          items:
            $ref: '#/components/schemas/ProductoDetalle'

    ProductoDetalle:
      type: object
      properties:
        producto_id:
          type: integer
          example: 1
        cantidad:
          type: integer
          example: 2
        nombre:
          type: string
          example: Paracetamol 500mg
        precio:
          type: number
          format: double
          example: 5.50
        tipo:
          type: string
          example: medicamento
        requiere_receta:
          type: boolean
          example: false

    Error:
      type: object
      properties:
        error:
          type: string
          description: Descripción del error
          example: Stock insuficiente
        details:
          type: object
          description: Detalles adicionales del error
          nullable: true

  responses:
    Unauthorized:
      description: No autorizado - Token no proporcionado o inválido
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error: Token de autenticación requerido

    InternalError:
      description: Error interno del servidor
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error: Error interno del servidor
            details: Descripción detallada del error